{"version":3,"sources":["ti108/model.cljs"],"mappings":"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","names":["ti108.model/empty-register","ti108.model/other","reagent.core.atom","ti108.model/op","ti108.model/memory","ti108.model/register","ti108.model/reset","cljs.core/reset!","ti108.model/reset-if-not-malleable","cljs.core/not","cljs.core/deref","ti108.model/add-digit","n","reagent.debug/has-console","js/console","cljs.core.swap_BANG_","cljs.core/assoc","ti108.model/add-dp","ti108.model/plus-minus","clojure.string/starts-with?","cljs.core.subs","ti108.model/prep-2op","o","ti108.model/tonum","decimal.core/decimal","ti108.model/fromnum","decimal.core/to-string","decimal.core/integer?","ti108.model/do=","G__62125","G__62126","fexpr__62124","ti108.model/sqrt","decimal.core/sqrt","ti108.model/as-string","ti108.model/percent","ti108.model/mrc","ti108.model/m+","G__62127","G__62128","decimal.core/+","ti108.model/m-","G__62129","G__62130","decimal.core/-","ti108.model/add","ti108.model/sub","ti108.model/mul","decimal.core/*","ti108.model/div","decimal.core/div"],"sourcesContent":["(ns ti108.model\n  (:require\n   [reagent.core :as reagent :refer [atom]]\n   [reagent.dom :as rdom]\n   [reagent.debug :as debug]\n   [decimal.core :as dc]))\n\n(def empty-register {:buffer nil :dp false :malleable true})\n\n(def other (atom nil)) \n(def op (atom nil))\n\n(def memory (atom empty-register))\n\n(def register (atom empty-register))\n\n\n(defn reset []\n  (reset! register empty-register)\n  (reset! op nil)\n  (reset! other nil))\n\n(defn reset-if-not-malleable []\n  (when (not (:malleable @register)) (reset)))\n\n(defn add-digit [n]\n  #(do\n    (debug/log (str \"mealleable: \" (:malleable @register)))\n    (reset-if-not-malleable)\n    (swap! register assoc :buffer (str (:buffer @register) n))))\n   \n(defn add-dp []\n (reset-if-not-malleable)\n (when (not (:dp @register))\n   (swap! register assoc :dp true\n                         :buffer (str (:buffer @register) \".\"))))\n\n(defn plus-minus []\n  (reset-if-not-malleable)\n  (swap! register assoc :buffer (if (clojure.string/starts-with? (:buffer @register) \"-\")\n      \t\t    \t   \t   (subs (:buffer @register) 1)\n\t\t\t\t   (str \"-\" (:buffer @register)))))\n\n(defn prep-2op [o]\n  #(do\n     (reset! other @register)\n     (reset! register empty-register)\n     (reset! op o)))\n\n(defn tonum [n] (dc/decimal (:buffer n)))\n\n\n\n\n(defn fromnum [n]\n  (debug/log (dc/to-string n))\n  {:buffer (dc/to-string n)\n   :dp (not (dc/integer? n))\n   :malleable false})\n\n(defn do= []\n (reset! register (fromnum (@op (tonum @other) (tonum @register)))))\n\n\n(defn sqrt []\n  (reset! register (fromnum (dc/sqrt (tonum @register)))))\n\n\n(defn as-string []\n   (str\n     (if (nil? (:buffer @register))\n       \"0\"\n       (:buffer @register))\n     (when (not (:dp @register)) \".\")))\n\n\n(defn percent []\n  (reset! register (fromnum (/ (tonum @register) 100)))\n  (do=))\n\n(defn mrc []\n      (reset! register @memory)\n      (reset! memory empty-register))\n      \n(defn m+ []\n (reset! memory\n   (if (not (:buffer @memory))\n     @register\n     (fromnum (dc/+ (tonum @memory) (tonum @register)))))\n (swap! register assoc :malleable false))\n     \n(defn m- []\n (reset! memory\n   (if (not (:buffer @memory))\n     @register\n     (fromnum (dc/- (tonum @memory) (tonum @register)))))\n (swap! register assoc :malleable false))\n     \n\n(def add dc/+)\n(def sub dc/-)\n(def mul dc/*)\n(def div dc/div)\n"]}